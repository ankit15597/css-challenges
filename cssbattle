CSS Battles: Battle 1 : #1Simply Square

<!-- OBJECTIVE -->
<!-- Write HTML/CSS in this editor and replicate the given target image in the least code possible. What you write here, renders as it is -->
Soln:
<div></div>
<style>
  div {
    width: 200px;
    height: 200px;
    background: #b5e0ba;
  }
  body {
    background: #5d3a3a;
    margin: 0px;
  }
</style>

Battle 1 - Challenge 2: Carrom
div class="firstline one"></div>
<div class="firstline two"></div>
<div class="three"></div>
<div class="four"></div>
<style>
  div.firstline {
    display: inline-block;
  }
 
  div.one {
    width: 50px;
    height: 50px;
    background: #fdc57b;
    margin-top: 42px;
    margin-left:42px
  }
   div.two {
    width: 50px;
    height: 50px;
    background: #fdc57b;
    margin-top: 42px;
    margin-left:196px
  }
  
  div.three {
    width: 50px;
    height: 50px;
    background: #fdc57b;
    margin-top: 96px;
    margin-left:42px;
    display: inline-block;
  }
  
   div.four {
    width: 50px;
    height: 50px;
    background: #fdc57b;
    margin-top: 96px;
    margin-left:196px;
    display: inline-block;
   
  }
  
  body {
    background: #62374e;
  }
  
</style>

CSS GRID GARDEN
Now try setting grid-column-start to a negative value.
--6/28
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#poison {
grid-column-start: -3;
}

Instead of defining a grid item based on the start and end positions of the grid lines, you can define it based on your desired column width using the span keyword. Keep in mind that span only works with positive values.

For example, water these carrots with the rule grid-column-end: span 2;.


--Challenge 7--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
  grid-column-start: 2;
grid-column-end: span 2;
}

Try using grid-column-end with the span keyword again to water your carrots.


--Challenge 8--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
  grid-column-start: 1;
grid-column-end:span 5;
}

You can also use the span keyword with grid-column-start to set your item's width relative to the end position.

--Challenge 9--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-column-start: span 3;
  grid-column-end: 6;
}

Typing both grid-column-start and grid-column-end every time can get tiring. Fortunately, grid-column is a shorthand property that can accept both values at once, separated by a slash.

For example, grid-column: 2 / 4; will set the grid item to start on the 2nd vertical grid line and end on the 4th grid line.

--Challenge 10--

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-column: 4/6;
}

Try using grid-column to water these carrots. The span keyword also works with this shorthand property so give it a try!


--Challenge 11--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-column:2/span 3;
}


--Challenge 12--
One of the things that sets CSS grids apart from flexbox is that you can easily position items in two dimensions: columns and rows. grid-row-start works much like grid-column-start except along the vertical axis.
Use grid-row-start to water these carrots.

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-row-start:3;
}


--Challenge 13--
Now give the shorthand property grid-row a try.

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-row:3/6;
}

Use grid-column and grid-row at the same time to set position in both dimensions.


--Challenge 14--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#poison {
grid-column-start:2;
grid-row-start:5;
}


--Challenge 15--
You can also use grid-column and grid-row together to span larger areas within the grid. Give it a try!

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-column:2/6;
grid-row:1/6;
}


--Challenge 16--
If typing out both grid-column and grid-row is too much for you, there's yet another shorthand for that. grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.
One example of this would be grid-area: 1 / 1 / 3 / 6;.

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-area: 1/2/4/6
}
