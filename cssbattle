CSS Battles: Battle 1 : #1Simply Square

<!-- OBJECTIVE -->
<!-- Write HTML/CSS in this editor and replicate the given target image in the least code possible. What you write here, renders as it is -->
Soln:
<div></div>
<style>
  div {
    width: 200px;
    height: 200px;
    background: #b5e0ba;
  }
  body {
    background: #5d3a3a;
    margin: 0px;
  }
</style>

Battle 1 - Challenge 2: Carrom
div class="firstline one"></div>
<div class="firstline two"></div>
<div class="three"></div>
<div class="four"></div>
<style>
  div.firstline {
    display: inline-block;
  }
 
  div.one {
    width: 50px;
    height: 50px;
    background: #fdc57b;
    margin-top: 42px;
    margin-left:42px
  }
   div.two {
    width: 50px;
    height: 50px;
    background: #fdc57b;
    margin-top: 42px;
    margin-left:196px
  }
  
  div.three {
    width: 50px;
    height: 50px;
    background: #fdc57b;
    margin-top: 96px;
    margin-left:42px;
    display: inline-block;
  }
  
   div.four {
    width: 50px;
    height: 50px;
    background: #fdc57b;
    margin-top: 96px;
    margin-left:196px;
    display: inline-block;
   
  }
  
  body {
    background: #62374e;
  }
  
</style>

CSS GRID GARDEN
Now try setting grid-column-start to a negative value.
--6/28
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#poison {
grid-column-start: -3;
}

Instead of defining a grid item based on the start and end positions of the grid lines, you can define it based on your desired column width using the span keyword. Keep in mind that span only works with positive values.

For example, water these carrots with the rule grid-column-end: span 2;.


--Challenge 7--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
  grid-column-start: 2;
grid-column-end: span 2;
}

Try using grid-column-end with the span keyword again to water your carrots.


--Challenge 8--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
  grid-column-start: 1;
grid-column-end:span 5;
}

You can also use the span keyword with grid-column-start to set your item's width relative to the end position.

--Challenge 9--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-column-start: span 3;
  grid-column-end: 6;
}

Typing both grid-column-start and grid-column-end every time can get tiring. Fortunately, grid-column is a shorthand property that can accept both values at once, separated by a slash.

For example, grid-column: 2 / 4; will set the grid item to start on the 2nd vertical grid line and end on the 4th grid line.

--Challenge 10--

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-column: 4/6;
}

Try using grid-column to water these carrots. The span keyword also works with this shorthand property so give it a try!


--Challenge 11--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-column:2/span 3;
}


--Challenge 12--
One of the things that sets CSS grids apart from flexbox is that you can easily position items in two dimensions: columns and rows. grid-row-start works much like grid-column-start except along the vertical axis.
Use grid-row-start to water these carrots.

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-row-start:3;
}


--Challenge 13--
Now give the shorthand property grid-row a try.

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-row:3/6;
}

Use grid-column and grid-row at the same time to set position in both dimensions.


--Challenge 14--
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#poison {
grid-column-start:2;
grid-row-start:5;
}


--Challenge 15--
You can also use grid-column and grid-row together to span larger areas within the grid. Give it a try!

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-column:2/6;
grid-row:1/6;
}


--Challenge 16--
If typing out both grid-column and grid-row is too much for you, there's yet another shorthand for that. grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.
One example of this would be grid-area: 1 / 1 / 3 / 6;.

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
grid-area: 1/2/4/6
}

--Challenge 17--
How about multiple items? You can overlap them without any trouble. Use grid-area to define a second area that covers all of the unwatered carrots.
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water-1 {
  grid-area: 1 / 4 / 6 / 5;
}

#water-2 {
grid-area: 2/3/5/6;
}


--Challenge 18--
If grid items aren't explicitly placed with grid-area, grid-column, grid-row, etc., they are automatically placed according to their order in the source code. We can override this using the order property, which is one of the advantages of grid over table-based layout.
By default, all grid items have an order of 0, but this can be set to any positive or negative value, similar to z-index.
Right now, the carrots in the second column are being poisoned and the weeds in the last column are being watered. Change the order value of the poison to fix this right away!

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

.water {
  order: 0;
}

#poison {
order:1;
}

--Challenge 19--
Now the water and poison are alternating, even though all of the weeds are at the start of your garden. Set the order of the poisons to remedy this.

#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

.water {
  order: 0;
}

.poison {
order: -1;
}


--Challenge 20--
Up to this point, you've had your garden set up as a grid with five columns, each 20% of the full width, and five rows, each 20% of the full height.
This was done with the rules grid-template-columns: 20% 20% 20% 20% 20%; and grid-template-rows: 20% 20% 20% 20% 20%; Each rule has five values which create five columns, each set to 20% of the overall width of the garden.
But you can set the grid up however you like. Give grid-template-columns a new value to water your carrots. You'll want to set the width of the 1st column to be 50%.

#garden {
  display: grid;
grid-template-columns:50% 50%;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
  grid-column: 1;
  grid-row: 1;
}

--Challenge 21--
Specifying a bunch of columns with identical widths can get tedious. Luckily there's a repeat function to help with that.
For example, we previously defined five 20% columns with the rule grid-template-columns: 20% 20% 20% 20% 20%;. This can be simplified as grid-template-columns: repeat(5, 20%);
Using grid-template-columns with the repeat function, create eight columns each with 12.5% width. This way you won't overwater your garden.

#garden {
  display: grid;
grid-template-columns: repeat(8, 12.5%);
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
  grid-column: 1;
  grid-row: 1;
}

--Challenge 22--
grid-template-columns doesn't just accept values in percentages, but also length units like pixels and ems. You can even mix different units together.
Here, set three columns to 100px, 3em, and 40% respectively.

#garden {
  display: grid;
grid-template-columns:100px 3em 40% ;
  grid-template-rows: 20% 20% 20% 20% 20%;
}

--Challenge 23--
Grid also introduces a new unit, the fractional fr. Each fr unit allocates one share of the available space. For example, if two elements are set to 1fr and 3fr respectively, the space is divided into 4 equal shares; the first element occupies 1/4 and the second element 3/4 of any leftover space.
Here, weeds make up the left 1/6 of your first row and carrots the remaining 5/6. Create two columns with these widths using fr units.

#garden {
  display: grid;
grid-template-columns: 1fr 5fr;
  grid-template-rows: 20% 20% 20% 20% 20%;

--Challenge 24--
When columns are set with pixels, percentages, or ems, any other columns set with fr will divvy up the space that's left over.
Here the carrots form a 50 pixel column on the left, and the weeds a 50 pixel column on the right. With grid-template-columns, create these two columns, and use fr to make three more columns that take up the remaining space in between.

#garden {
  display: grid;
grid-template-columns: 50px 1fr 1fr 1fr 50px; --We need to give three frs here because we have the poison starting from line number 5 initially. (Imp pt.)
  grid-template-rows: 20% 20% 20% 20% 20%;
}

#water {
  grid-area: 1 / 1 / 6 / 2;
}

#poison {
  grid-area: 1 / 5 / 6 / 6;
}

--Challenge 25--
Now there is a 75 pixel column of weeds on the left side of your garden. 3/5 of the remaining space is growing carrots, while 2/5 has been overrun with weeds.
Use grid-template-columns with a combination of px and fr units to make the necessary columns.

#garden {
  display: grid;
grid-template-columns: 75px 3fr 2fr;
  grid-template-rows: 100%;

grid-template-rows works much the same as grid-template-columns.

Use grid-template-rows to water all but the top 50 pixels of your garden. Note that the water is set to fill only your 5th row, so you'll need to create 5 rows in total.


--Challenge 26-- (Tricky Imp challenge), concept of auto applied.
#garden {
  display: grid;
  grid-template-columns: 20% 20% 20% 20% 20%;
grid-template-rows: 50px 0% 0% 0% auto;
}

#water {
  grid-column: 1 / 6;
  grid-row: 5 / 6;
}

--Challenge 27-- 
grid-template is a shorthand property that combines grid-template-rows and grid-template-columns.
For example, grid-template: 50% 50% / 200px; will create a grid with two rows that are 50% each, and one column that is 200 pixels wide.
Try using grid-template to water an area that includes the top 60% and left 200 pixels of your garden.

#garden {
  display: grid;
grid-template: 60%/200px;
}

#water {
  grid-column: 1;
  grid-row: 1;
}

Your garden is looking great. Here you've left a 50 pixel path at the bottom of your garden and filled the rest with carrots.

Unfortunately, the left 20% of your carrots have been overrun with weeds. Use CSS grid one last time to treat your garden.


--Challenge 28-- Important concept about fr, auto & percentages.
#garden {
  display: grid;
grid-template-rows: auto 50px; grid-template-columns:20% auto;
}
